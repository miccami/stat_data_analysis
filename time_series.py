# -*- coding: utf-8 -*-
"""ПЗМС6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14Clf0s9UskJ6E_A5NtMve8ZLURKbPeud
"""

import numpy as np
from scipy.stats import laplace
import scipy
from scipy.stats import chi2
from sklearn.metrics import r2_score
from sklearn.linear_model import LinearRegression
from math import *
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from statsmodels.stats.stattools import durbin_watson as dwtest

file_1 = open("1.txt")
file_1 = file_1.read().split('\n')[:-1]
file_1 = [float(i) for i in file_1]
file_1 = np.array(file_1)

file_2 = open("2.txt")
file_2 = file_2.read().split('\n')[:-1]
file_2 = [float(i) for i in file_2]
file_2 = np.array(file_2)

plt.title(" 1")
plt.plot(file_1)
plt.show()
plt.title(" 2")
plt.plot(file_2)

m_size = [3, 5, 7, 9]
eps = 0.3
alpha = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
gamma = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]
lag = 5



def r(x, k):
  n = len(x)
  r = (n - k) * sum(x[:n-k]*x[k:n]) - sum(x[:n-k])*sum(x[k:n])
  r /= np.sqrt((n - k) * sum(x[:n-k] ** 2) - sum(x[:(n - k)]) ** 2)
  r /= np.sqrt((n - k) * sum(x[k:n] ** 2) - sum(x[k:n]) ** 2)
  return r


def q_stat(x):
    n = len(x)
    return n * (n + 2) * sum([r(x, k) ** 2 / (n - k) for k in range(5)])

def q_check(x, m=5):
    q = q_stat(x)
    chi = chi2.ppf(0.95, m)
    print(f"q = {q}, chi2 = {chi}")
    if q > chi:
        print("q > chi2 => Автокорреляция присутствует")
    else:
        print("q < chi2 => Автокорреляция отсутствует")

def darbin(x1, x2):
    e = x1 - x2
    n = 64
    # m=1
    d = sum([(e[i] - e[i - 1])**2 for i in range(1, 64)]) / sum([e[i]**2 for i in range(63)])
    if 2 < d <= 4:
        d = 4 - d
    print('для теста Дарби-Уотсона')
    if 0 <  d < 1.567:
        print("Положительная автокорреляция:", d)
    elif d < 1.629:
        print("Неопределенность:", d)
    else:
        print("Автокорреляция отсутствует:", d)

"""#SMA"""

def sma(m, y):
    w = 2 * m + 1
    yt = []
    y_new = np.concatenate([np.array([y[0] for _ in range(m)]), y])
    y_new = np.concatenate([y_new, np.array([y[-1] for _ in range(m)])])
    for i in range(len(y_new) - w + 1):
        yt.append((1/w) * sum(y[i:i+w+1]))
    return np.array(yt)

"""# 1"""

min_q = 10000000
min_m = 10000000
for m in m_size:
    curr_q = q_stat(sma(m, file_1))
    if curr_q < min_q:
        min_q = curr_q
        min_m = m
q_check(sma(min_m, file_1))
plt.title(f"m={min_m}")
plt.plot(file_1)
plt.plot(sma(min_m, file_1))
plt.show()
darbin(file_1, sma(min_m, file_1))

"""# 2"""

min_q = 10000000
min_m = 10000000
for m in m_size:
    curr_q = q_stat(sma(m, file_2))
    if curr_q < min_q:
        min_q = curr_q
        min_m = m
q_check(sma(min_m, file_2))
plt.title(f"m={min_m}")
plt.plot(file_2)
plt.plot(sma(min_m, file_2))
plt.show()
darbin(file_2, sma(min_m, file_2))

# for m in m_size:
#     plt.title(f"m={m}")
#     plt.plot(file_2)
#     plt.plot(sma(m, file_2))
#     plt.show()
#     darbin(file_2, sma(m, file_2))
#     q_check(sma(m, file_2), 5)

"""# WMA

## 1
"""

def wma(m, y):
    up = np.array([np.exp(-eps * np.abs(i)) for i in range(-m, m + 1)])
    down = sum(up)
    w = up / down
    yt = []
    y_new = np.concatenate([np.array([y[0] for _ in range(m)]), y])
    y_new = np.concatenate([y_new, np.array([y[-1] for _ in range(m)])])
    for i in range(m, len(y) + m):
        yt.append(sum(w * y_new[i-m:i+m+1]))
    return np.array(yt)

min_q = 10000000
min_m = 10000000
for m in m_size:
    curr_q = q_stat(wma(m, file_1))
    if curr_q < min_q:
        min_q = curr_q
        min_m = m
q_check(wma(min_m, file_1))
plt.title(f"m={min_m}")
plt.plot(file_1)
plt.plot(wma(min_m, file_1))
plt.show()
darbin(file_1, wma(min_m, file_1))

"""## 2"""

min_q = 10000000
min_m = 10000000
for m in m_size:
    curr_q = q_stat(wma(m, file_2))
    if curr_q < min_q:
        min_q = curr_q
        min_m = m
q_check(wma(min_m, file_2))
plt.title(f"m={min_m}")
plt.plot(file_2)
plt.plot(wma(min_m, file_2))
plt.show()
darbin(file_2, wma(min_m, file_2))

# for m in m_size:
#     plt.title(f"m={m}")
#     plt.plot(file_2)
#     plt.plot(wma(m, file_2))
#     plt.show()
#     darbin(file_2, wma(m, file_2))
#     q_check(wma(m, file_2), 5)

"""#EMA"""

def ema(alpha, y):
    yt = [y[0]]
    for i in range(1, len(y)):
        yt.append(alpha * y[i] + (1 - alpha) * yt[-1])
    return np.array(yt)

min_q = 10000000
min_m = 10000000
for m in alpha:
    curr_q = q_stat(ema(m, file_1))
    if curr_q < min_q:
        min_q = curr_q
        min_m = m
q_check(ema(min_m, file_1))
plt.title(f"alpha={min_m}")
plt.plot(file_1)
plt.plot(ema(min_m, file_1))
plt.show()
darbin(file_1, ema(min_m, file_1))


# for a in alpha:
#     plt.title(f"alpha={a}")
#     plt.plot(file_1)
#     plt.plot(ema(a, file_1))
#     plt.show()
#     darbin(file_1, sma(m, file_1))
#     q_check(wma(m, file_1), 5)

"""## 2"""

min_q = 10000000
min_m = 10000000
for m in alpha:
    curr_q = q_stat(ema(m, file_2))
    if curr_q < min_q:
        min_q = curr_q
        min_m = m
q_check(ema(min_m, file_2))
plt.title(f"alpha={min_m}")
plt.plot(file_2)
plt.plot(ema(min_m, file_2))
plt.show()
darbin(file_2, ema(min_m, file_2))


# for a in alpha:
#     plt.title(f"alpha={a}")
#     plt.plot(file_2)
#     plt.plot(ema(a, file_2))
#     plt.show()
#     darbin(file_2, sma(m, file_2))
#     q_check(wma(m, file_2), 5)

"""#DEMA"""

def dema(alpha, gamma, y):
    yt = [y[0]]
    bt = [y[1] - y[0]]
    for i in range(1, len(y)):
        yt.append(alpha * y[i] + (1 - alpha) * (yt[-1] + bt[-1]))
        bt.append(gamma * (yt[-1] - yt[-2]) + (1 - gamma) * bt[-1])
    return np.array(yt)

min_q, min_a, min_g = 10000000, 10000000, 100000000
for a in alpha:
    for g in gamma:
        curr_q = q_stat(dema(a, g, file_1))
        if curr_q < min_q:
            min_q = curr_q
            min_a, min_g = a, g
q_check(dema(a, g,file_1))
plt.title(f"alpha={min_a}, gamma={min_g}")
plt.plot(file_1)
plt.plot(dema(a, g,file_1))
plt.show()
darbin(file_1, dema(a, g, file_1))

min_q, min_a, min_g = 10000000, 10000000, 100000000
for a in alpha:
    for g in gamma:
        curr_q = q_stat(dema(a, g, file_2))
        if curr_q < min_q:
            min_q = curr_q
            min_a, min_g = a, g
q_check(dema(a, g,file_2))
plt.title(f"alpha={min_a}, gamma={min_g}")
plt.plot(file_2)
plt.plot(dema(a, g,file_2))
plt.show()
darbin(file_2, dema(a, g, file_2))





# for a in alpha:
#     for g in gamma:
#         plt.figure(figsize=(3, 3))
#         plt.title(f"alpha={a}, gamma={g}")
#         plt.plot(file_2)
#         plt.plot(dema(a, g, file_2))
#         plt.show()
#         darbin(file_2, sma(m, file_2))
#         q_check(wma(m, file_2), 5)

# for a in alpha:
#     for g in gamma:

#         q_check(dema(a, g,file_2))
#         plt.title(f"alpha={a}, gamma={g}")
#         plt.plot(file_2)
#         plt.plot(dema(a, g,file_2))
#         plt.show()
#         darbin(file_2, dema(a, g, file_2))

